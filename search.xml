<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>星轨教程</title>
      <link href="/2024/12/01/%E6%98%9F%E8%BD%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/01/%E6%98%9F%E8%BD%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="如何拍摄星轨的解说稿"><a href="#如何拍摄星轨的解说稿" class="headerlink" title="如何拍摄星轨的解说稿"></a>如何拍摄星轨的解说稿</h3><p>大家好，今天我将为大家介绍如何拍摄星轨。星轨是星空摄影中技术要求较低的一种题材，几乎任何设备都可以拍摄，哪怕是手机。</p><hr><h4 id="一、拍摄前的准备"><a href="#一、拍摄前的准备" class="headerlink" title="一、拍摄前的准备"></a>一、拍摄前的准备</h4><ol><li><strong>地点选择</strong>：虽然星轨拍摄不太挑环境，但尽量选择空气质量好的地方，减少云、沙尘和强光干扰。光污染和月亮影响较小，但避免近距离的灯光更理想。</li><li><strong>设备</strong>：<ul><li><strong>相机或手机</strong>：近10年生产的相机通常带有间隔拍摄功能。</li><li><strong>三脚架</strong>：用于固定相机。</li><li><strong>快门线</strong>（若没有间隔拍摄功能）。</li><li><strong>镜头清理工具</strong>：避免拍摄时出现光斑。</li></ul></li></ol><hr><h4 id="二、拍摄步骤"><a href="#二、拍摄步骤" class="headerlink" title="二、拍摄步骤"></a>二、拍摄步骤</h4><ol><li><p><strong>安装设备</strong>：将相机稳固在三脚架上，选择一个固定的拍摄角度。</p></li><li><p><strong>设置参数</strong>：</p><ul><li><strong>对焦</strong>：手动对焦，将画面放大，调整对焦环，直至星星变得最小。</li><li><strong>模式</strong>：使用M档。</li><li><strong>快门时间</strong>：设为30秒。</li><li><strong>光圈</strong>：光圈越大越好，F4也能满足要求。</li><li><strong>ISO</strong>：建议使用自动，观察相机自动选择的亮度效果，调整为合适的值。例如，如果ISO 100亮度合适就直接使用，但若画面过曝，可以缩短快门时间或减小光圈。</li></ul></li><li><p><strong>间隔拍摄</strong>：</p><ul><li>开启相机的间隔拍摄功能，设置拍摄间隔与快门时间一致（如30秒）。</li><li>如果相机没有间隔拍摄功能，可使用快门线代替。</li><li>确保拍摄时间尽可能长，至少一个小时，以捕捉足够长的星轨。</li></ul></li><li><p><strong>关闭长曝光降噪</strong>：</p><ul><li>长曝光降噪会在每张照片后额外耗费时间进行降噪，影响星轨的连续性，因此需要关闭。</li></ul></li><li><p><strong>图片格式</strong>：将相机的照片保存为RAW格式，便于后期调整。</p></li></ol><hr><h4 id="三、后期处理"><a href="#三、后期处理" class="headerlink" title="三、后期处理"></a>三、后期处理</h4><ol><li><p><strong>图片导入</strong>：</p><ul><li>使用软件（如Photoshop或Lightroom），将所有拍摄的照片导入。</li><li>打开第一张照片，在Camera Raw滤镜中调整。</li></ul></li><li><p><strong>调整参数</strong>：</p><ul><li><strong>基本调整</strong>：适当提升曝光，让星点更亮，与背景形成对比。</li><li><strong>色温调整</strong>：使用吸管工具选择图片中灰色的部分进行自动校准，或手动调整。</li><li><strong>对比增强</strong>：通过清晰度、纹理等选项，让星轨和环境更突出。</li><li><strong>曲线调整</strong>：压暗天空的暗部，提升亮部对比，使星轨更明显。</li></ul></li><li><p><strong>同步设置</strong>：</p><ul><li>将第一张照片的调整同步到所有照片。</li><li>导出为JPG格式，便于后续堆叠。</li></ul></li><li><p><strong>星轨堆叠</strong>：</p><ul><li>在PS中，使用脚本功能将所有图片载入为图层。</li><li>选择所有图层后，将混合模式设置为“变亮”。</li><li>星轨会自动生成。</li></ul></li><li><p><strong>柔化星轨</strong>：</p><ul><li>为星轨开头和结尾的照片添加透明度递增或递减效果（例如第一张设置透明度为10%，第二张为20%，以此类推），使星轨的起始和结束更加自然。</li></ul></li></ol><hr><h4 id="四、拍摄注意事项"><a href="#四、拍摄注意事项" class="headerlink" title="四、拍摄注意事项"></a>四、拍摄注意事项</h4><ol><li><strong>避免光斑</strong>：清理镜头灰尘，并尽量避免正对灯光。</li><li><strong>调整环境亮度</strong>：在后期中可通过调节混色器，适当降低建筑物等橙色部分的亮度，让星轨更加突出。</li><li><strong>色彩处理</strong>：降低天空蓝色的饱和度，避免画面过于夸张。</li></ol><hr><p>通过以上步骤，无论是在专业设备还是普通环境下，大家都可以轻松拍摄出效果惊艳的星轨照片。希望这些技巧对大家有所帮助，期待看到你们的作品！</p><p>谢谢大家！</p><h1 id="讲解二"><a href="#讲解二" class="headerlink" title="讲解二"></a>讲解二</h1><h3 id="如何拍摄星轨"><a href="#如何拍摄星轨" class="headerlink" title="如何拍摄星轨"></a>如何拍摄星轨</h3><p>大家好！<br>今天我将向大家介绍如何拍摄星轨。虽然我自己还在学习的过程中，但希望能分享一些实用的经验和技巧。如果有不足之处，欢迎指正。</p><hr><h4 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h4><ol><li><p><strong>设备准备</strong>：</p><ul><li><strong>三脚架</strong>：尽量选择稳定性高的三脚架。如果没有，可以找到能够牢固固定相机的方式，避免晃动。</li><li><strong>相机</strong>：任何具有手动模式的相机都可以使用。确保电池充足，最好带备用电池或充电宝。检查内存卡容量是否足够。</li><li><strong>快门线或延时功能</strong>：如果相机支持内置延时功能，例如 Sony A6400，就不需要额外的快门线。</li></ul></li><li><p><strong>拍摄位置</strong>：</p><ul><li>选择一个远离光污染的地方。山区、沙漠或偏远的郊区是理想选择。</li><li>尽量在晴朗无云的夜晚拍摄，并提前查询星象，寻找合适的星轨方向。</li></ul></li></ol><hr><h4 id="二、拍摄设置"><a href="#二、拍摄设置" class="headerlink" title="二、拍摄设置"></a>二、拍摄设置</h4><ol><li><p><strong>手动对焦</strong>：</p><ul><li>切换到手动对焦模式，可以通过放大画面或使用峰值对焦功能调整焦点。我常用木星作为参考点进行对焦。</li></ul></li><li><p><strong>白平衡</strong>：</p><ul><li>固定白平衡值，推荐设置在 4200K-4600K之间。根据个人喜好调整，低值会偏蓝，高值会偏黄。</li></ul></li><li><p><strong>曝光参数</strong>：</p><ul><li>使用“500法则”计算最长曝光时间：500 ÷ 镜头焦段。例如，使用 50mm 定焦镜头，曝光时间应为 10 秒以内。</li><li>ISO 设置在 2000-3200 之间。尽量避免过高的 ISO 值，以减少噪点。</li><li>间隔时间建议 25-30 秒。</li></ul></li><li><p><strong>照片数量</strong>：</p><ul><li>星轨拍摄通常需要大量照片，后期合成星轨效果。例如，拍摄 10 秒的延时视频需要至少 240 张照片。</li></ul></li></ol><hr><h4 id="三、后期处理-1"><a href="#三、后期处理-1" class="headerlink" title="三、后期处理"></a>三、后期处理</h4><ol><li><p><strong>初步调整</strong>：</p><ul><li>降低高光，减轻光污染。</li><li>适当增加白色色阶，让星星更加明亮。</li><li>压低黑色色阶，提升星空对比度，但要注意保留前景细节。</li></ul></li><li><p><strong>增强效果</strong>：</p><ul><li>调高清晰度和纹理参数，使星轨更加突出。</li><li>使用“去朦胧”工具，改善画面灰蒙感。</li><li>可用镜像滤镜对银河部分进行局部增强，例如提升室温或偏品红色调。</li></ul></li><li><p><strong>同步设置</strong>：</p><ul><li>调整完成后，可将效果同步到所有照片，确保整个系列风格统一。</li><li>如果有预设，可以直接应用，提高效率。</li></ul></li></ol><hr><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>星轨的拍摄是一项既考验耐心又需要细致调整的工作。无论是前期准备还是后期处理，细节的把握都至关重要。希望以上内容能为大家提供帮助，期待你们拍出精彩的星轨作品！</p><hr><p>如果需要，我还可以进一步优化某些部分或者加入特定案例。请告诉我您的需求！</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小猫日记</title>
      <link href="/2024/12/01/%E5%B0%8F%E7%8C%AB%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/12/01/%E5%B0%8F%E7%8C%AB%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="小猫日记"><a href="#小猫日记" class="headerlink" title="小猫日记"></a>小猫日记</h1><p>os:记录遇到的各种小猫~ （待更新）</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 生活 </category>
          
          <category> 摄影 </category>
          
          <category> 猫咪 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootLearn</title>
      <link href="/2024/11/28/SpringBootLearn/"/>
      <url>/2024/11/28/SpringBootLearn/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-学习"><a href="#SpringBoot-学习" class="headerlink" title="SpringBoot 学习"></a>SpringBoot 学习</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$\textcolor&#123;red&#125;&#123;&#125;$</span><br><span class="line">&lt;font color=&quot;red&quot; face=&quot;逐浪新宋&quot; &gt;Java&lt;/font&gt;</span><br></pre></td></tr></table></figure><p><font color="red" face="逐浪新宋" >Java</font>的所有变量和函数都要定义在类中。</p><p>函数或变量前加<font color="red" face="逐浪新宋" >static</font>表示静态对象，类似于全局变量。<br>静态对象属于<font color="red" face="逐浪新宋" >class</font>，而不属于<font color="red" face="逐浪新宋" >class</font>的具体实例。</p><p>静态函数中只能调用静态函数和静态变量。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(max(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">        fill(a, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] b = getArray2d(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[][] a, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] getArray2d(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line"><span class="comment">//        静态函数里面只能调用静态函数</span></span><br><span class="line">        System.out.println(max(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">        fill(a, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[][] a, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j ++)&#123;</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129215410.png" alt="20241129215410"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = getArray2d(<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] getArray2d(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="type">int</span> [][] res = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j ++)&#123;</span><br><span class="line">                res[i][j] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129215242.png" alt="20241129215242"><br><strong>静态变量访问时用类名，静态函数访问时也是用类名<br>普通变量普通函数，用具体的实例来访问</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Arguments</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        静态变量访问时用类名，静态函数访问时也是用类名</span></span><br><span class="line"><span class="comment">//        普通变量普通函数，用具体的实例来访问</span></span><br><span class="line">        System.out.println(Arguments.x);</span><br><span class="line">        System.out.println(Arguments.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129215735.png" alt="20241129215735"></p><p><strong>所有未加static的函数绑定到的都是对象上</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function: F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function: G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        node.f();<span class="comment">//实例对象</span></span><br><span class="line">        Node.g();<span class="comment">//类名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129220700.png" alt="20241129220700"></p><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><font color="red" face="逐浪新宋" >class</font>与<font color="red" face="逐浪新宋" >C++</font>、<font color="red" face="逐浪新宋" >Python</font>类似。</p><h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3> <ul>    <li>一个源文件中只能有一个<font color="red" face="逐浪新宋" >public</font>类。</li>    <li>一个源文件可以有多个非public<font color="red" face="逐浪新宋" >public</font>类。</li>    <li>每个源文件中，先写<font color="red" face="逐浪新宋" >package</font>语句，再写<font color="red" face="逐浪新宋" >import</font>语句，最后定义类</li> </ul><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><ul><li><font color="red">public</font>: 所有对象均可以访问</li><li><font color="red">private</font>: 只有自己可以访问</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    构造函数可以写多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d)&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;(%d, %d)\n&quot;</span>, p.getX(), p.getY());</span><br><span class="line">        p.setX(<span class="number">5</span>);</span><br><span class="line">        p.setY(<span class="number">10</span>);</span><br><span class="line">        System.out.println(p.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129231031.png" alt="20241129231031"></p><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>每个类只能继承一个类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    构造函数可以写多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d)&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ColorPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y);</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d, %s)&quot;</span>, <span class="built_in">super</span>.getX(), <span class="built_in">super</span>.getY(),color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ColorPoint</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">3</span>,<span class="number">5</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        System.out.println(cp.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129231834.png" alt="20241129231834"></p><h3 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    构造函数可以写多个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d)&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ColorPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y);</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d, %s)&quot;</span>, <span class="built_in">super</span>.getX(), <span class="built_in">super</span>.getY(),color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="type">Point</span> <span class="variable">colorPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="comment">// 多态，同一个类的实例，调用相同的函数，运行结果不同</span></span><br><span class="line">        System.out.println(point.toString());</span><br><span class="line">        System.out.println(colorPoint.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129232305.png" alt="20241129232305"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>interface与class类似。主要用来定义类中所需包含的函数。</p><p>接口也可以继承其他接口，一个类可以实现多个接口。</p><h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Hero</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h4><p>每个类可以实现多个接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Role</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Hero</span> <span class="keyword">extends</span> <span class="title class_">Role</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zeus</span> <span class="keyword">implements</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zeus&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name +<span class="string">&quot;: Move&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zeus</span> <span class="variable">zeus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zeus</span>();</span><br><span class="line">        zeus.greet();</span><br><span class="line">        zeus.attack();</span><br><span class="line">        zeus.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241129235846.png" alt="20241129235846"></p><h4 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h4><p><font color="red">多态，同一个类的实例，调用相同的函数，运行结果不同</font></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Athena</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Athena&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero[] heros = &#123;<span class="keyword">new</span> <span class="title class_">Zeus</span>(), <span class="keyword">new</span> <span class="title class_">Athena</span>()&#125;;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero: heros) &#123;</span><br><span class="line">            hero.greet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>类似于C++的template，Java的类和接口也可以定义泛型，即同一套函数可以作用于不同的对象类型。<br>泛型只能使用对象类型，不能使用基本变量类型。</p><p><strong>定义一个链表</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head; p != <span class="literal">null</span>; p = p.next)&#123;</span><br><span class="line">            System.out.println(p.val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130001809.png" alt="20241130001809"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        泛型里面的类类型只能是对象，不能是基本类型</span></span><br><span class="line">        Stack&lt;Integer&gt; stk = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>存档<br>不同机器上的代码同步<br>git init<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130170010.png" alt="20241130170010"><br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130170107.png" alt="20241130170107"></p><p>git status 是查看当前的状态，是否有修改<br>git add. 是添加所有修改的文件<br>git commit -m “first commit” 是提交修改<br>git push 是上传到远程仓库<br>git pull 是拉取远程仓库的修改<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130170349.png" alt="20241130170349"></p><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130170955.png" alt="20241130170955"></p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>前后端分离是一种开发模式，前端负责页面的展示，后端负责数据的处理。<br>前后端不分离<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130173813.png" alt="20241130173813"><br>前后端分离<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130174147.png" alt="20241130174147"></p><h5 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h5><p>MVC是一种设计模式，将程序分为三个部分：模型（Model）、视图（View）和控制器（Controller）。<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241130181030.png" alt="20241130181030"></p><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241201014536.png" alt="20241201014536"></p><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/20241201022309.png" alt="20241201022309"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摄影日记</title>
      <link href="/2024/11/28/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/11/28/%E6%91%84%E5%BD%B1%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>计划在这篇日记里记录一些生活的点滴。</p><h3 id="瞳孔写真"><a href="#瞳孔写真" class="headerlink" title="瞳孔写真"></a>瞳孔写真</h3><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/%E7%9E%B3%E5%AD%94-8.jpg" alt="瞳孔-8"><br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/%E7%9E%B3%E5%AD%94-4.jpg" alt="瞳孔-4"></p><h1 id="星空摄影"><a href="#星空摄影" class="headerlink" title="星空摄影"></a>星空摄影</h1><p><strong>前期准备:</strong></p><p>三脚架，相机，电池或者外接充电宝，内存卡，快门线(相机自带延时功能)</p><p><strong>拍摄准备:</strong><br>1.找一颗比较明亮的星星然后手动放大对焦(可以使用峰值)<br>2.锁定白平衡4200k-4600k左右<br>3.设定拍摄间隔时间30秒左右拍一张(500法则500除以焦段)iso2000-3200<br>后期制作延时帧数为24，比如说想要拍摄10秒钟的延时视频就需要240张的<br>照片<br>然后就可以按下快门进行拍摄了。</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1155163094&bvid=BV1hZ421W7PR&cid=1565766372&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记</title>
      <link href="/2024/11/27/%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/11/27/%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-11-27"><a href="#2024-11-27" class="headerlink" title="2024-11-27"></a>2024-11-27</h1><h2 id="今天做了什么"><a href="#今天做了什么" class="headerlink" title="今天做了什么"></a>今天做了什么</h2><p>  白天六七点才睡觉，上午收到国家奖学金的修改通知，茫茫慌慌地跑去签字盖章，好麻烦，王老师又来找我弄贫困生的材料，什么是是个头，好累。直接找小王宝贝吃饭了，最近我有些颓废了，小王很优秀，比我有前途多了，我好像走到死胡同了，我也不知道该怎么办了。只是经常难受，我有点在乎别人的看法，我想要其他人理解我。晚上吃了回家吃饭，小王宝贝出的钱98，有些贵，哈哈。<br>  <img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/202411272306692.jpg"></p><h1 id="2024-11-28"><a href="#2024-11-28" class="headerlink" title="2024&#x2F;11&#x2F;28"></a>2024&#x2F;11&#x2F;28</h1><p>早上8：30起床了, 洗漱，喝药，背单词，上午准备把课程看一下，有时间把项目开始弄了，时间越来越少，其实距离春招也很近了。<br>10：52 背完单词了，用了好久，但是背多少，配置picgo插件，已经可以实现vscode进行书写blog了。越来越方便了，blog暂时不修改样式，开始做项目啦~<br>倒霉，晚上好难过，傻逼王老师有几把找我拉人头，牛马当的时间太久了，大家都觉得这种脏活得我来吗，好难受， 我也有说不的权力，我没有帮他弄，小王宝贝没能理解我，我知道这个不能怪她，我心理真的很希望身边人能理解我，我无法选择找父母和亲人倾诉，小王是我的唯一，害怕有一天会all alone，可能有人会觉得我只是患得患失，但是爱和不爱其实是可以明显感觉到的，一起去拿快递也是等，你自己去回去换衣服，我也是会等的。慢慢来吧。差点压不住怒火。<br><strong>视频测试</strong></p><iframe style="align:center" src="//player.bilibili.com/player.html?isOutside=true&aid=113373228307662&bvid=BV1bn14YVEei&cid=26472811684&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><hr><h1 id="2024-11-29"><a href="#2024-11-29" class="headerlink" title="2024&#x2F;11&#x2F;29"></a>2024&#x2F;11&#x2F;29</h1><p>上午背了单词，状态开始回升了，戒🦌，课程好想这几天全部弄掉啊，自己好菜，被群里人骂了，我有点发现我自己的问题了，我喜欢别人喂送的知识，自己很难主动学习，好像我一直都是这样。<br>我有一点找到我自己的价值了，我想去做自己做不到的事情，不是去追求遥不可及，是希望自己可以在自己能做的事情上有所突破，去静下心学习自己之前不会的知识，一点点吃透他。加油吧小羊。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥日记</title>
      <link href="/2024/11/27/%E5%87%8F%E8%82%A5%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/11/27/%E5%87%8F%E8%82%A5%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="减肥日记"><a href="#减肥日记" class="headerlink" title="减肥日记"></a>减肥日记</h1><p><strong>os：记录一些日常生活中的计划，每天的体重和照片</strong></p><h2 id="2024-12-1-定个目标，毕业前瘦到140斤"><a href="#2024-12-1-定个目标，毕业前瘦到140斤" class="headerlink" title="2024&#x2F;12&#x2F;1 定个目标，毕业前瘦到140斤"></a>2024&#x2F;12&#x2F;1 定个目标，毕业前瘦到140斤</h2><p>腹肌轮每天去使用，20个一组，4<del>5组<br>俯卧撑 10</del>15个一组，3<del>45组。<br>适当有氧，跑步2km起步，找一找跳绳，跳神的话20分钟左右。<br>卷腹，卷腹的话，10个一组，20</del>30组。（选择性，可替换）<br>一周1<del>2次拉单杠，5个一组，尝试2</del>4组。（选择性，可替换）<br>休息、放纵待定。</p><h2 id="时间：24-11-27"><a href="#时间：24-11-27" class="headerlink" title="时间：24&#x2F;11&#x2F;27"></a>时间：24&#x2F;11&#x2F;27</h2><p>有点没精神，趁着还有时间，先把今天小计划写一下吧，上午不知道能不能起来了，早上做一些俯卧撑，腹肌带一下，饮食要开始控制起来了。</p><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/202411272300145.jpg" alt="1ba3ff415343fd504ee5307505235cd"></p><p><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/202411272300620.jpg" alt="47c518219d1593d6dd77126b8376059"></p><h2 id="时间：24-11-28"><a href="#时间：24-11-28" class="headerlink" title="时间：24&#x2F;11&#x2F;28"></a>时间：24&#x2F;11&#x2F;28</h2><p>这天啥也没干，吃了不少，上午和对象一起吃的饭，两个人，一碗宜宾燃面，一碗牛肉拌面。一个鸡肉卷，一个淀粉肠。晚上我吃的小馄饨。<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/0b6ec618324b4b24a37e687f24fff27.jpg" alt="0b6ec618324b4b24a37e687f24fff27"><br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/9eb4c2e92756399f9289c9a06f21ac9.jpg" alt="9eb4c2e92756399f9289c9a06f21ac9"><br>体重慢慢在增长，妈蛋的，真要完蛋了。</p><h2 id="时间：24-11-27-1"><a href="#时间：24-11-27-1" class="headerlink" title="时间：24&#x2F;11&#x2F;27"></a>时间：24&#x2F;11&#x2F;27</h2><p>反正也没钱，正常活着就行。<br>这天没运动</p><h2 id="时间：24-11-28-30"><a href="#时间：24-11-28-30" class="headerlink" title="时间：24&#x2F;11&#x2F;28 ~ 30"></a>时间：24&#x2F;11&#x2F;28 ~ 30</h2><p>两天没运动</p><h2 id="时间：24-12-1"><a href="#时间：24-12-1" class="headerlink" title="时间：24&#x2F;12&#x2F;1"></a>时间：24&#x2F;12&#x2F;1</h2><p>凌晨称重，今天想打篮球，两点左右睡觉。<br>上午加油。晚上来总结。<br><img src="https://raw.gitmirror.com/Withnoidea/PicGoDemo/blog/img/fb8bcc18787ab1a61074171b088d6ff.jpg" alt="fb8bcc18787ab1a61074171b088d6ff"></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/11/26/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/11/26/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1-测试"><a href="#1-测试" class="headerlink" title="1. 测试"></a>1. 测试</h3><ul><li>测试的目的是为了发现程序中的错误，而不是证明程序是正确的。</li></ul><h3 id="2-测试的分类"><a href="#2-测试的分类" class="headerlink" title="2. 测试的分类"></a>2. 测试的分类</h3><ul><li>单元测试：对最小的可测试单元进行检查和验证。</li><li>集成测试：对模块之间的接口进行检查和验证。</li><li>系统测试：对整个系统进行检查和验证。</li></ul><p>发现问题：图片无法显示</p><p><img src="https://gitee.com/ososluvwang/cloudimage/raw/master/img/202411270137976.png" alt="image-20241127013712931"><br>尝试本地图片显示<br><img src="/image.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/26/hello-world/"/>
      <url>/2024/11/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>第一次部署到github上，感觉挺有意思的。准备用这个记录我的生活吧，感觉自己好废物。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
